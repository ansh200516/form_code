<?php
/**
* @file
* Module file for validating course template form
*/

function course_template_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'course_template_node_form') {
    $form['#validate'][] = 'course_template_form_validate';
    //dpm($form['#validate']);
    //dpm($form);
  }
}


/**
* Form validation function
*/

function course_template_form_validate($form, &$form_state) {
  //dpm($form_state);
  
  //Do not use full course number. Only acceptable format HUL7XX/HUL8XX/HUL3XX/HUL2XX/HUL1XX (no space in between)
  if ( strlen( $form_state['values']['field_crs_tpl_course_number']['und'][0]['value']) != 6) {
    form_set_error('field_crs_tpl_course_number', t("Course number should be in this format: HUL7XX. DO NOT USE THE LAST TWO DIGITS. Also, there is no gap between HUL and 7XX."));
  }
  if (!is_numeric(substr($form_state['values']['field_crs_tpl_course_number']['und'][0]['value'], 3, 1) )) {
    form_set_error('field_crs_tpl_course_number', t("Course number should be in this format: HUL7XX. DO NOT USE THE LAST TWO DIGITS. Also, there is no gap between HUL and 7XX."));
  }
  
//Only some specific roles can use full course number (Course co-ordinator will properly allocate course numbers)  
global $user;
$check_roles = array_intersect(array('super editor', 'site architect', 'course editor'), array_values($user->roles));
if (empty($check_roles)) {
    if( (substr($form_state['values']['field_crs_tpl_course_number']['und'][0]['value'], 4, 1) != 'X') || (substr($form_state['values']['field_crs_tpl_course_number']['und'][0]['value'], 5, 1) != 'X') ) {
        form_set_error('field_crs_tpl_course_number', t("Course number should be in this format: HUL7XX. DO NOT USE THE LAST TWO DIGITS. Also, there is no gap between HUL and 7XX."));
    }
}
  
  //Check if the course is one-and-half credit
  $one_half = $form_state['values']['field_is_one_and_half_credit']['und'][0]['value'];
  
  //If not a one-and-half credit course then check the LTP structure compatibility
  if ($one_half != 1) {
      //Check L-T-P structure
      $ltp = $form_state['values']['field_crs_tpl_ltp_structure']['und'][0]['value'];
      $ltp_len = strlen($form_state['values']['field_crs_tpl_ltp_structure']['und'][0]['value']);
      $ltp_first_char = substr($form_state['values']['field_crs_tpl_ltp_structure']['und'][0]['value'], 0, 1);
      $ltp_second_char = substr($form_state['values']['field_crs_tpl_ltp_structure']['und'][0]['value'], 1, 1);
      $ltp_third_char = substr($form_state['values']['field_crs_tpl_ltp_structure']['und'][0]['value'], 2, 1);
      $ltp_fourth_char = substr($form_state['values']['field_crs_tpl_ltp_structure']['und'][0]['value'], 3, 1);
      $ltp_fifth_char = substr($form_state['values']['field_crs_tpl_ltp_structure']['und'][0]['value'], 4, 1);
      
      $ltp_arr = explode('-',$ltp);
      $ltp_l = $ltp_arr[0];
      $ltp_t = $ltp_arr[1];
      $ltp_p = $ltp_arr[2];
      //drupal_set_message('<pre>' . print_r($ltp_p, true) . '</pre>');	
     /*
      if ($ltp_len != 5) {
        form_set_error('field_crs_tpl_ltp_structure', t("L-T-P field should be filled like this: 3-1-0."));
      }
      if (!is_numeric($ltp_first_char) || !is_numeric($ltp_third_char) || !is_numeric($ltp_fifth_char)) {
        form_set_error('field_crs_tpl_ltp_structure', t("L-T-P field should be filled like this: 3-1-0."));
      }
      if ( $ltp_second_char != '-' || $ltp_fourth_char != '-') {
        form_set_error('field_crs_tpl_ltp_structure', t("L-T-P field should be filled like this: 3-1-0."));
      }
     */
  }
  
  //If a one-and-half credit course
    if ($one_half == 1) {
      //Check L-T-P structure
      $ltp_len = strlen($form_state['values']['field_crs_tpl_ltp_structure']['und'][0]['value']);
      $ltp_first_char = substr($form_state['values']['field_crs_tpl_ltp_structure']['und'][0]['value'], 0, 1);
      $ltp_second_char = substr($form_state['values']['field_crs_tpl_ltp_structure']['und'][0]['value'], 1, 1);
      $ltp_third_char = substr($form_state['values']['field_crs_tpl_ltp_structure']['und'][0]['value'], 2, 1);
      $ltp_fourth_char = substr($form_state['values']['field_crs_tpl_ltp_structure']['und'][0]['value'], 3, 1);
      $ltp_fifth_char = substr($form_state['values']['field_crs_tpl_ltp_structure']['und'][0]['value'], 4, 1);
      $ltp_sixth_char = substr($form_state['values']['field_crs_tpl_ltp_structure']['und'][0]['value'], 5, 1);
      $ltp_seventh_char = substr($form_state['values']['field_crs_tpl_ltp_structure']['und'][0]['value'], 6, 1);

      if ($ltp_len != 7) {
        form_set_error('field_crs_tpl_ltp_structure', t("L-T-P field should be filled like this: 1.5-0-0."));
      }
      if (!is_numeric($ltp_first_char) || !is_numeric($ltp_third_char) || !is_numeric($ltp_fifth_char) || !is_numeric($ltp_seventh_char)) {
        form_set_error('field_crs_tpl_ltp_structure', t("L-T-P field should be filled like this: 1.5-0-0."));
      }
      if ( $ltp_fourth_char != '-' || $ltp_sixth_char != '-') {
        form_set_error('field_crs_tpl_ltp_structure', t("L-T-P field should be filled like this: 1.5-0-0."));
      }
  }
  
  
  //Check total lecture hours
  $count = $form_state['field']['field_crs_tpl_lecture_outline']['und']['items_count'];
  $hr=0;
  for($i=0; $i<$count; $i++) { 
    if(isset($form_state['field']['field_crs_tpl_lecture_outline']['und']['entity'][$i]->field_crs_tpl_module_hrs['und'][0]['value'])) {
    		$hr += $form_state['field']['field_crs_tpl_lecture_outline']['und']['entity'][$i]->field_crs_tpl_module_hrs['und'][0]['value'];
	}
   }
  
  if ($form_state['values']['field_crs_tpl_tot_lecture']['und'][0]['value'] != $hr) {
    form_set_error('field_crs_tpl_tot_lecture', t('Total lecture hours should be the total of module-wise lecture hours.'));
  }
  if ($one_half != 1) {
    $l = substr($form_state['values']['field_crs_tpl_ltp_structure']['und'][0]['value'], 0, 1);
    }
    else {
     $l = substr($form_state['values']['field_crs_tpl_ltp_structure']['und'][0]['value'], 0, 3);   
     //$l = (float)$l;
    }
  $l_hr = $l*14;
  if ($form_state['values']['field_crs_tpl_tot_lecture']['und'][0]['value'] != $l_hr) {
    form_set_error('field_crs_tpl_tot_lecture', t("Total lecture hours should be 14*L ( = $l_hr )."));
  }
  
  
  //Check total tutorial hours
  $count = $form_state['field']['field_crs_tpl_tute_outline']['und']['items_count'];
  $hr=0;
  for($i=0; $i<$count; $i++) {
    if(isset($form_state['field']['field_crs_tpl_tute_outline']['und']['entity'][$i]->field_crs_tpl_module_hrs['und'][0]['value'])) { 
    	$hr += $form_state['field']['field_crs_tpl_tute_outline']['und']['entity'][$i]->field_crs_tpl_module_hrs['und'][0]['value'];   
	}
    }
  
  if ($form_state['values']['field_crs_tpl_tot_tute']['und'][0]['value'] != $hr) {
    form_set_error('field_crs_tpl_tot_tute', t('Total tutorial hours should be the total of module-wise tutorial hours.'));
  }
  if ($one_half != 1) {
    $t = substr($form_state['values']['field_crs_tpl_ltp_structure']['und'][0]['value'], 2, 1);
   }
  else {
    $t = substr($form_state['values']['field_crs_tpl_ltp_structure']['und'][0]['value'], 4, 1);
  }
  $t_hr = $t*14;
  if ($form_state['values']['field_crs_tpl_tot_tute']['und'][0]['value'] != $t_hr) {
    form_set_error('field_crs_tpl_tot_tute', t("Total tutorial hours should be 14*T ( = $t_hr )."));
  }
  
  
  //Check total practical/practice hours
  $count = $form_state['field']['field_crs_tpl_prac_outline']['und']['items_count'];
  $hr=0;
  for($i=0; $i<$count; $i++) { 
    if(isset($form_state['field']['field_crs_tpl_prac_outline']['und']['entity'][$i]->field_crs_tpl_module_hrs['und'][0]['value'])) {
    	$hr += $form_state['field']['field_crs_tpl_prac_outline']['und']['entity'][$i]->field_crs_tpl_module_hrs['und'][0]['value'];   
	}
    }
  
  if ($form_state['values']['field_crs_tpl_tot_prac']['und'][0]['value'] != $hr) {
    form_set_error('field_crs_tpl_tot_prac', t('Total practical hours should be the total of module-wise practical hours.'));
  }
  /*
  if ($one_half != 1) {
    $p = substr($form_state['values']['field_crs_tpl_ltp_structure']['und'][0]['value'], 4, 1);
  }
  else {
   $p = substr($form_state['values']['field_crs_tpl_ltp_structure']['und'][0]['value'], 6, 1);
  }
  */
  $p_hr = $ltp_p*14;
  
  if ($form_state['values']['field_crs_tpl_tot_prac']['und'][0]['value'] != $p_hr) {
    form_set_error('field_crs_tpl_tot_prac', t("Total practical hours should be 14*P ( = $p_hr )."));
  }
 
  
  
  //Self-learning is a must for 700/800 level courses
  $n = substr($form_state['values']['field_crs_tpl_course_number']['und'][0]['value'], 3, 1);
  if($n==7 || $n==8) {
    if( ($form_state['field']['field_crs_tpl_self_learning']['und']['items_count'] == 1) && (empty($form_state['field']['field_crs_tpl_self_learning']['und']['entity'][0]->field_crs_tpl_module_no['und'][0]['value']) || empty($form_state['field']['field_crs_tpl_self_learning']['und']['entity'][0]->field_crs_tpl_module_des['und'][0]['value']) )){
       form_set_error('field_crs_tpl_self_learning', t("Self-learning component is missing for this ".$n."00 level course."));
       //form_set_error('field_crs_tpl_course_number', t("Self-learning component is missing for this ".$n."00 level course."));
     }
  }
 

  // Date of senate approval 
  $approval_status = $form_state['values']['field_crs_tpl_approval_status']['und'][0]['value'];
  if($approval_status==7|$approval_status==8) {
	if(empty($form_state['values']['field_senate_approval_date']['und'][0]['value'])){
        	form_set_error('field_senate_approval_date', t("Date of senate approval must be filled if the status is senate approved/enlisted"));
        }
  }

  
}

//-------------------------------------------
// Adding a form to generate course from course template

function course_template_node_view($node, $view_mode, $langcode) {
 if (user_is_logged_in()) {
   global $user;
   $check_roles = array_intersect(array('administrator', 'super editor', 'site architect', 'course editor'), array_values($user->roles));
   if (!empty($check_roles)) {  
     if ($node->type == 'course_template' && $view_mode == 'full') {
       $node = menu_get_object($type = 'node'); //Get the current node - which is a course template
       $twrapper = entity_metadata_wrapper('node', $node);
       $course_no = $twrapper->field_crs_tpl_course_number->value();
       //Check if course number has full numbering
       if (is_numeric(substr($course_no,-3))) {
         $approval_status = $twrapper->field_crs_tpl_approval_status->value();
         if($approval_status>=7) {
      	    $courseQuery = new EntityFieldQuery();
    	    $result = $courseQuery
	  	->entityCondition('entity_type', 'node')
		->propertyCondition('type', 'course')
  		->fieldCondition('field_course_number', 'value', $course_no, '=')
  		->execute();
    	    if(empty($result['node'])) {
          	 $my_form = drupal_get_form('add_course_form', $node);
        	 $node->content['add_course_form'] = array(
	 		'#markup' => drupal_render($my_form),
			'#weight' => 30,	
			); 
    	    }
          }
        }
      }
    }
  }
}

function add_course_form($form, &$form_state, $node) {

	$form['node_id'] = array(
	  '#type' => 'hidden',
	  '#value' => $node->nid,
	);

		
	$form['submit'] = array
	(
	   '#type' => 'submit',
	   '#value' => t('Add to list of courses'),
	);
	
	return $form;
}


function add_course_form_validate($form, &$form_state) {
  // Validation logic.
}

function add_course_form_submit($form, &$form_state) {
  
  // Submission logic.
  global $user;

 // $nodeid =  $form_state['values']['node_id'];
 // drupal_set_message(t('Node id is  @nodeid.', array('@nodeid' => $nodeid)), 'status');
 
 // Now create an entity_metadata_wrapper around the node entity
 // for getting values easier
 $node = menu_get_object($type = 'node'); //Get the current node - which is a course template
 $twrapper = entity_metadata_wrapper('node', $node); //entity wrapper around the current template node
 $title = $twrapper->title->value(); // Get a field value
 //$discipline = $twrapper->field_discipline->label();
 //$discipline = $twrapper->field_discipline->value();
 //$list = $twrapper->field_discipline->optionsList();
 $course_no = $twrapper->field_crs_tpl_course_number->value();
 $discipline = $twrapper->field_discipline->value();
 $ltp = $twrapper->field_crs_tpl_ltp_structure->value();
 $credit = $twrapper->field_crs_tpl_credit->value();
 $pre_req = $twrapper->field_crs_tpl_pre_req->value();
 $obj = $twrapper->field_crs_tpl_objective->value();
 $content = $twrapper->field_crs_tpl_contents->value();
 $reading = $twrapper->field_crs_tpl_references->value();
 
 $discipline_tags =array();
 if (get_class($twrapper->field_discipline) == 'EntityListWrapper') {
 foreach ($twrapper->field_discipline->getIterator() as $delta => $term_wrapper) {
    // $term_wrapper may now be accessed as a taxonomy term wrapper.
    $label = $term_wrapper->label();
    if($label=='Multi. Disc.') {
    	$label = 'Multidiscipline'; 
    }
    $arr_terms = taxonomy_get_term_by_name($label, 'disciplines');
    if(!empty($arr_terms)) {
    		$arr_terms = array_values($arr_terms);
    		$discipline_tags[] = $arr_terms[0]->tid;
     }
     else {
		$vobj = taxonomy_vocabulary_machine_name_load('disciplines');
    		$term = new stdClass();
    		$term->name = $label;
    		$term->vid = $vobj->vid;
    		taxonomy_term_save($term);
		$discipline_tags[] = $term->tid;
     }
   
  }
  }
  else {
	$label = $twrapper->field_discipline->label();
    	if($label=='Multi. Disc.') {
   	 	$label = 'Multidiscipline'; 
    	}	
	
    $arr_terms = taxonomy_get_term_by_name($label, 'disciplines');
    if(!empty($arr_terms)) {
    		$arr_terms = array_values($arr_terms);
    		$discipline_tags[] = $arr_terms[0]->tid;
     }
     else {
		$vobj = taxonomy_vocabulary_machine_name_load('disciplines');
    		$term = new stdClass();
    		$term->name = $label;
    		$term->vid = $vobj->vid;
    		taxonomy_term_save($term);
		$discipline_tags[] = $term->tid;
     }
	
  }
 

 // creating a new object $node and setting its 'type' and uid property
 $values = array(
   'type' => 'course',
   'uid' => $user->uid,
   'status' => 1,
   'comment' => 0,
   'promote' => 0,
 );
 $entity = entity_create('node', $values);
 
 // Now create an entity_metadata_wrapper around the new node entity
 // for setting values easier
 $cwrapper = entity_metadata_wrapper('node', $entity); // Wrapper around newly created course node
 // Using the wrapper, we do not have to worry about telling Drupal
 // what language we are using. The Entity API handles that for us.
 $cwrapper->title->set($title);
 $cwrapper->field_course_number->set($course_no);
 $cwrapper->field_discipline->set($discipline);
 $cwrapper->field_ltp_structure->set($ltp);
 $cwrapper->field_credit->set($credit);
 $cwrapper->field_pre_requisite->set(array('value' => $pre_req));
 $cwrapper->field_course_objective->set(array('value' => $obj));
 
 $cwrapper->field_course_content->set(array(
			'value' => $content['value'],
			'format' => $content['format'],
			'safe_value' => $content['safe_value'],)
	    );
 $cwrapper->field_suggested_reading_list->set(array(
			'value' => $reading['value'],
			'format' => $reading['format'],
			'safe_value' => $reading['safe_value'],)
	    );


 $cwrapper->field_discipline_tags->set($discipline_tags);
 $twrapper->field_crs_tpl_approval_status->set(8); //Enlisted
 

 // Now just save the wrapper and the entity
 $cwrapper->save();
 // Save the course template as well with new approval status as "enlisted"
 $twrapper->save();
 
 drupal_set_message(t('@title added to the list of courses.', array('@title' => $title)), 'status');
 //drupal_set_message('<pre>'. print_r($content, TRUE) . '</pre>', 'status');
 // drupal_set_message(t('Discipline is @disc.', array('@disc' => $discipline)), 'status');

}


/**
 * Implements hook_node_access().
 *
 * Enforces our access rules for custom workflow target content to force updates
 * only if the user is targeted in the user select field
 */
function course_template_node_access($node, $op, $account) {

 $type = is_string($node) ? $node : $node->type;
 if ($type == 'course_template' && ($op == 'update' || $op == 'delete')) {
   $allowed_roles = array('site architect', 'super editor', 'course editor');
   $access_allow = array_intersect($allowed_roles, array_values($account->roles));
        if ($access_allow) {
	   return NODE_ACCESS_ALLOW;
	}
	else {
	  if (!empty($node->field_crs_tpl_approval_status)) {
	     if ($node->field_crs_tpl_approval_status[LANGUAGE_NONE][0]['value'] >= 7) {
               return NODE_ACCESS_DENY;
             }
	  }
	}
   // Else ignore altering access
   return NODE_ACCESS_IGNORE;

 }

}

